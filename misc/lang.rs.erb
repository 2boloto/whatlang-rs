#[derive(PartialEq, Eq, Debug, Hash, Clone, Copy)]
pub enum Lang {
<% lang_codes.each do |code| %>
    <%= code.capitalize %>,
<% end %>
}


impl Lang {
    pub fn from_code<S: Into<String>>(code: S) -> Option<Lang> {
        match code.into().as_ref() {
            <% lang_codes.each do |code| %>
            "<%= code %>" => Some(Lang::<%= code.capitalize %>),
            <% end %>
            _ => None
        }
    }

    pub fn code(&self) -> &str {
        match *self {
            <% lang_codes.each do |code| %>
            Lang::<%= code.capitalize %> => "<%= code %>",
            <% end %>
        }
    }
}

pub type LangProfile = &'static [&'static str];
pub type LangProfileList = &'static [(Lang, LangProfile)];

<% scripts.each do |script| %>
pub const <%= script.name.upcase %>_LANGS : LangProfileList = &[
<% script.langs.each do |lang| %>
    (Lang::<%= lang.code.capitalize %>, &<%= lang.trigrams.inspect %>),
<% end %>
];
<% end %>



#[cfg(test)]
mod tests {
    use super::Lang;

    #[test]
    fn test_from_code() {
        assert_eq!(Lang::from_code("rus".to_string()), Some(Lang::Rus));
        assert_eq!(Lang::from_code("ukr"), Some(Lang::Ukr));
        assert_eq!(Lang::from_code("oops"), None);
    }

    #[test]
    fn test_code() {
        assert_eq!(Lang::Spa.code(), "spa");
    }
}
