/// Represents a language following [ISO 639-3](https://en.wikipedia.org/wiki/ISO_639-3) standard.
#[derive(PartialEq, Eq, Debug, Hash, Clone, Copy)]
pub enum Lang {
<% supported_langs.each do |lang| %>
    <%= lang.code.capitalize %>,
<% end %>
}


impl Lang {
    /// Get enum by ISO 639-3 code as a string.
    ///
    /// # Example
    /// ```
    /// use whatlang::Lang;
    /// assert_eq!(Lang::from_code("ukr"), Some(Lang::Ukr));
    /// ```
    pub fn from_code<S: Into<String>>(code: S) -> Option<Lang> {
        match code.into().to_lowercase().as_ref() {
      <% supported_langs.each do |lang| %>
      "<%= lang.code %>" => Some(Lang::<%= lang.code.capitalize %>),
      <% end %>
        _ => None
        }
    }

    /// Convert enum into ISO 639-3 code as a string.
    ///
    /// # Example
    /// ```
    /// use whatlang::Lang;
    /// assert_eq!(Lang::Ukr.to_code(), "ukr");
    /// ```
    pub fn to_code(&self) -> &str {
        match *self {
      <% supported_langs.each do |lang| %>
      Lang::<%= lang.code.capitalize %> => "<%= lang.code %>",
      <% end %>
    }
    }

    pub fn eng_name(&self) -> &str {
        match *self {
      <% supported_langs.each do |lang| %>
      Lang::<%= lang.code.capitalize %> => "<%= lang.eng_name %>",
      <% end %>
    }
    }
}

pub type LangProfile = &'static [&'static str];
pub type LangProfileList = &'static [(Lang, LangProfile)];

<% scripts.each do |script| %>
pub const <%= script.name.upcase %>_LANGS : LangProfileList = &[
<% script.langs.each do |lang| %>
    (Lang::<%= lang.code.capitalize %>, &<%= lang.trigrams.inspect %>),
<% end %>
];
<% end %>



#[cfg(test)]
mod tests {
    use super::Lang;

    #[test]
    fn test_from_code() {
        assert_eq!(Lang::from_code("rus".to_string()), Some(Lang::Rus));
        assert_eq!(Lang::from_code("ukr"), Some(Lang::Ukr));
        assert_eq!(Lang::from_code("ENG"), Some(Lang::Eng));
        assert_eq!(Lang::from_code("oops"), None);
    }

    #[test]
    fn test_to_code() {
        assert_eq!(Lang::Spa.to_code(), "spa");
    }

    #[test]
    fn test_eng_name() {
        assert_eq!(Lang::Spa.eng_name(), "Spanish");
        assert_eq!(Lang::Epo.eng_name(), "Esperanto");
        assert_eq!(Lang::Rus.eng_name(), "Russian");
    }
}
